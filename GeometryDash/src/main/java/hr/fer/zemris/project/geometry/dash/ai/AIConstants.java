package hr.fer.zemris.project.geometry.dash.ai;

import java.util.Comparator;
import java.util.function.DoubleUnaryOperator;

import hr.fer.zemris.project.geometry.dash.model.GameObject;
import hr.fer.zemris.project.geometry.dash.model.drawables.player.Player;

/**
 * Remembers all important constants for AI
 * @author Andi Å krgat
 *
 */
public class AIConstants {
	
	/**
	 * Maximum number of generations for genetic algorithm
	 */
	public static int maxGenerations = 50;
	
	/**
	 * Number of action in tree
	 */
	public static int numOfActions = 25;
	
	/**
	 * Comparator for game objects, it sorts first by x then by y
	 */
	public static final Comparator<GameObject> obstaclesLevelComparator = new Comparator<GameObject>() {

		@Override
		public int compare(GameObject o1, GameObject o2) {
			if(Math.abs(o1.getInitialPosition().getX() - o2.getInitialPosition().getX()) < 1e-7) {
				return Double.compare(o1.getInitialPosition().getY(), o2.getInitialPosition().getY());
			}
			return Double.compare(o1.getInitialPosition().getX(), o2.getInitialPosition().getX());
		}		
	};
	
	/**
	 * Default activation function
	 * Swish function
	 */
	public static final DoubleUnaryOperator activationFunction = (v -> 1 / (1 + Math.exp(-v)));
	
	/**
	 * Tanh hiperbolic function
	 */
//	public static final DoubleUnaryOperator activationFunction = v -> Math.tanh(v);

	 /** Maximum number of nodes
	 */
	 public static int maxNumberOfNode = 10; //not used so far
	 
	 /**
	  * Initial depth of tree
	  */
	 public static int initialDepth = 6;
	 
	 /**
	 * Maximum depth of tree
	 */
	public static int maxTreeDepth = 17;
	
	/**
	 * Should be okay
	 */
	public static int treePopulationSize = 50;
	
	/**
	 * We have <code>initialDepth<code> levels(2 to <code>initialDepth<code>) and <code>treePopulationSize</code>
	 * divided by <code>initialDepth</code> is populationSizeOfEachDepth
	 */
	public static int populationSizeOfEachDepth = treePopulationSize / (initialDepth-1);
	
	/**
	 * We have same number of trees generated by full and grow method 
	 */
	public static int populationSizeFullGrow = populationSizeOfEachDepth / 2;
	
	public static int POPULATION_SIZE = 300;
	
	public static final Comparator<Player> compareByPosition = (o1, o2) -> 
		Double.compare(o2.getCurrentPosition().getX(), o1.getCurrentPosition().getX());
	
	public static final Comparator<Player> playerComparator = compareByPosition.thenComparing(Player::getId);
	
	public static final int obstForAI = 10;
	 


}
